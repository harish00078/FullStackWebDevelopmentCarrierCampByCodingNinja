// IMP:while we are migrating the reducers and actions:from redux to redux-toolkit:

// [First-Part]:
// -> we did not have to import the (actions) from the actions-file into the reducer-file:

// import { ADD_TODO, TOGGLE_TODO } from "../actions/todoActions";

// IMP: we have to import the (createSlice) function from the redux-toolkit:through which we gonna create the reducer and actions:
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  todos: [
    { text: "Meeting at 9", completed: true },
    { text: "Lunch at 2", completed: false },
  ],
};

// IMP:Creating Reducer and Actions Using Redux-Toolkit:
// -> For Creating the (reducer) and actions using redux-toolkit:we have to use the (createSlice) function of redux-toolkit:
// -> The createSlice function in Redux Toolkit defines a application's state for the specific-section of the application, similar to how we defined state in regular Redux-reducers:but it does that in more efficient or simpler way:
// V.IMP:createSlice helps us to do (State-management) for a specific section of our application within a (single-file) by combining state, actions, and reducers in (one-place).in more appropriate and efficient-way:
// -> IMP: It does that by simply combining both reducers and actions into a single-configuration for a particular section or part of the application or application-state:

// => How We Gonna Do That:
// -> First-Step:
// -> We have to import the (createSlice) function from the redux-toolkit:

// -> Second-Step:
// -> we have to call or invoke the (createSlice) function:and store its result in a constant or variable:so that we can use it in our application by exporting it:because with in it we are gonna create the reducer and actions:
// V.IMP: we gonna name the variable  as per our application section or part for which we are creating the reducer and actions:we also gonna use the (Slice) word in the name at the end:

// How we configure the (createSlice) function:
// -> First-Step:It takes the (object) as an argument:
// -> Second-Step:Know with in that object:we basically configure our reducer and actions:

const todoSlice = createSlice({
  // IMP:The [first-property]: of the object is the (name) of the slice:
  // -> The name property is used as a prefix or (first-part) of the (word) for the (action-types) generated by createSlice-function automatically:
  // -> Example:if we have a slice-name as "todo":then the action-types will be like:todo/addTodo,todo/toggleTodo,etc:
  name: "todo",

  // IMP:The [second-property]: of the object is the (initial-state):
  // -> The initialState property is used to define the initial state of the slice or section of the application:
  initialState: initialState,

  // IMP: The [third property] of the object is the `reducers`:
  // -> The `reducers` property is used to define the reducer functions that update the state of a slice (a section of the application).

  // V.IMP: reducers or reducers-property is an object:with in which we gonna define the reducer-functions:

  reducers: {

    // IMP-NOTE:we create the reducer-functions as key-value pairs:because we are creating them inside the reducers-object:
    // [V.IMP]: The keys in the reducers object represent action-names (like 'add', 'toggle', etc).
    // Each key connects to a (reducer-function) as their (value):and that (reducer-function) basically handles and performs that specific-action:on the (state) of the application to update the (state):
    // [V.IMP]: which gonna be get combined with the (name) property of the createSlice-function (object) as a (suffix) to form the (action-types) automatically by the redux-toolkit:

    // [V.IMP]:later these (keys) or (action-names) also gonna be used as the (action-creator-functions) names automatically by the redux-toolkit:
    // -> Redux Toolkit automatically creates action-types and action-creator-functions based on these (keys) or (action-names):

    // IMP: The [first reducer function]:
    // -> This reducer function is used to add a new todo item to the list:so be gonna name it as (add):

    // -> IMP: [action-type] = will be:(todo/add):With in action-type we gonna use the (name) property of the createSlice-function (object) as a (prefix) and the (key) as a (suffix) to form the (action-type):and between both we gonna use the (/) slash-operator to form the (action-type):
    // -> [Slash-operator] = slash (/) is a naming convention in Redux to create a (space) between (names) for action-types:so that they did not conflict with each other and with other slices action-types:it is created by the (createSlice-function) automatically:

    // -> IMP: [action-creator-function] = will be:(todo.add):With in action-creator-function we gonna use the (name) property of the createSlice-function (object) as a (prefix) and the (key) as a (suffix) to form the (action-creator-function):and between both we gonna use the (.) dot-operator to form or access the (action-creator-function):
    // -> The dot (.) operator is used for object property access in JavaScript.
    // -> [createSlice().actions] = is an (object) where each (action-creator-function) is stored as a (property):it is created by the (createSlice-function) automatically:The (action-creator-functions) have the same names as the keys of the (reducer-functions):
    // V.IMP:that's why we are using the (.) dot-operator to access the (action-creator-function) with the same name as the (key):

  

    add: (state, action) => {
      // IMP: [state] = is the (current-state) of the application:
      // V.IMP-NOTE: [action.payload] = is the (payload) of the action:In (redux-toolkit) for accessing the (payload) or (Data) of the action-argument we have to use the (payload) property:which we have pass to us through the (action-creator-function) in the (dispatch-function):
      // -> It is the only property we have with in the action-creator-functions of redux-toolkit:
      // Example:if we have a action-creator-function as (todo.add):then the (payload) or (Data) of the action-argument will be stored in the (action.payload) property:
      // And this how we gonna access the (payload) or (Data) of the action-argument:
      // IMP-NOTE: we did not have to (define) the (payload) or (Data) of the action-argument:we just have to (access) it:so for that we simply gonna pass or use the (payload) argument:with in which we are basically have the (Data) of the action-argument:
      // IMP: [action.payload] = is the (text) of the action:we did not have to (define) that we just have to (access) it:
      // IMP: [action.payload] = is the (completed) of the action:we did not have to (define) that we just have to (access) it:
      state.todos.push({
        text:action.payload,
        completed:false,
      })
      
      
    },



  },
});

// [Second-Part]:
// IMP:we also have to remove the (reducer):while we are migrating the reducers and actions:from redux to redux-toolkit:
// export function todoReducer(state = initialState, action) {
//   switch (action.type) {
//     case ADD_TODO:
//       return {
//         ...state,

//         todos: [
//           ...state.todos,

//           {
//             text: action.text,
//             completed: false,
//           },
//         ],
//       };
//     case TOGGLE_TODO:
//       return {
//         ...state,

//         todos: state.todos.map((todo, index) => {
//           if (index === action.index) {
//             todo.completed = !todo.completed;
//           }

//           return todo;
//         }),
//       };

//     default:
//       return state;
//   }
// }
